<app xmlns="http://www.marklogic.com/mx"
     xmlns:xm="http://xmlmonks.com"
     xmlns:mx="http://www.marklogic.com/mx" xmlns:search=
     "http://marklogic.com/appservices/search" default-context="?">

  <!-- passthru  //-->
  <path url="/resource/"  type="passthru" description=""/>
  <path url="/robots.txt" type="passthru" description=""/>

  <!-- http redirection //-->

  <path url="/" type="redirect">/monastery?tag=recent</path>
   
  <path url="/articles/2011/06/20/XML+Monks+launched" type="forward">/mx-controller.xqy?tag=&amp;mode=handler&amp;url=%2Farticle&amp;href=&amp;ns=&amp;content-type=text%2Fhtml&amp;method=GET&amp;uri=/content/articles/xmlmonks.xml</path>

  <!-- inline //-->
  <path url="/monastery" content-type="text/html" method="GET">
    <html xmlns="http://www.w3.org/1999/xhtml">
      {mx:data('/c/head')}
      <body>
        {mx:data('/c/header')}
        {mx:data('/c/tagnav')}
        <nav>
          <ul>
            {
            let $search := mx:param('search')
            let $result := if($search) then
              let $options := <options xmlns="http://marklogic.com/appservices/search">
              <additional-query>{
                cts:collection-query("articles")
                }
              </additional-query>
              <return-results>true</return-results>
              <term-option>wildcarded</term-option>
              <term-option>case-insensitive</term-option>
            </options>
            return
            for $article in search:search($search,$options)//search:result/@uri
            return
                fn:doc($article)            
              else if (mx:param('tag') eq 'recent') then
                fn:subsequence(for $article in
                fn:collection('articles') order by
                $article/xm:article/@date descending return $article
 ,1,10)
              else
                fn:collection((mx:param('tag'),'articles')[1])
            return
            for $article at $count in $result
             order by $article/xm:article/@date descending
             return
             if($article/xm:article/@type) then
             <li>
             {for $tag in
             xdmp:document-get-collections(fn:document-uri($article))[. ne
             'articles']
             return
             (<span class="{$tag}"><a
             href="/monastery?tag={$tag}" 
             style="text-decoration:none;">{$tag}</a></span>,'&#160;')
             }
             <span class="date">{fn:data($article/xm:article/@date)}</span> &#160;&#160;&#160;<a
             href="{fn:data($article/xm:article/@uri)}" 
             target="external"
             onclick='$("#a{$count}").slideToggle();return false'
             >{fn:data($article/xm:article/@title)}</a><sup
             class="link">&#8594;><a
             href="{fn:data($article/xm:article/@uri)}" 
             target="external" style="text-decoration:none;">{fn:data($article/xm:article/@type)}</a></sup>

             {if ($article/xm:article/xm:comment) then
             <div id="a{$count}" class="slidingDiv">
               <i>{$article/xm:article/xm:comment/text()}</i><a
             href="{fn:data($article/xm:article/@uri)}" 
             target="external" style="float:right;font-size:90%;">GO TO LINK</a>
             </div>
             else
              ()
             }
             </li>
             else
             <li>
             {for $tag in
             xdmp:document-get-collections(fn:document-uri($article))[. ne
             'articles']
             return
             (<span class="{$tag}"><a
             href="/monastery?tag={$tag}" 
             style="text-decoration:none;">{$tag}</a></span>,'&#160;')
             }
             <span class="date">{fn:data($article/xm:article/@date)}</span> &#160;&#160;&#160;<a
             href="/articles/{fn:replace(fn:data($article/xm:article/@title),'
             ','+')}">{fn:data($article/xm:article/@title)}</a>
             </li>
            }
          </ul>
        </nav>
        {mx:data('/c/footer')}
        <script type="text/javascript" src="/resource/js/search.js"></script>
      </body>
    </html>
  </path>

  <path url="/article" content-type="text/html"
        method="GET">
    <html xmlns="http://www.w3.org/1999/xhtml">
      {mx:data('/c/head')}
      <body>
        {mx:data('/c/header')}
        {mx:data('/c/tagnav')}
        {mx:data('/article-view')}
        {mx:data('/c/footer')}
        <script type="text/javascript" src="/resource/js/search.js"></script>
      </body>
    </html>
  </path>

  <path url="/article-view" type="template" data="/article.xml" content-type="text/html"
        method="GET">
    <xsl:stylesheet version="1.0" xmlns="http://www.w3.org/1999/xhtml"
                    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xdmp="http://marklogic.com/xdmp">
      <xsl:variable name="uri" select="document-uri(.)"/>
      <xsl:template match="xm:section">
        <div class="article">
          <span class="date"><xsl:value-of select="../@date"/></span>&#160;
          <xsl:for-each select="xdmp:document-get-collections($uri)[. ne
          'articles']"> 
          <span class="{.}"><a
             href="/monastery?tag={.}" 
             style="text-decoration:none;"><xsl:value-of select="."/></a></span>&#160;
          </xsl:for-each>
           <xsl:apply-templates select="*"/>
          <span class="author">--<xsl:value-of select="../@author"/></span>
        </div>
      </xsl:template>
      <xsl:template match="xm:title">
        <h3><xsl:value-of select="text()"/></h3>
      </xsl:template>
      <xsl:template match="xm:para">
        <p><xsl:apply-templates select="node()"/></p>
      </xsl:template>
      <xsl:template match="xm:b">
        <b><xsl:apply-templates select="node()"/></b>
      </xsl:template>
      <xsl:template match="xm:i">
        <i><xsl:apply-templates select="node()"/></i>
      </xsl:template>
      <xsl:template match="xm:link">
        <a href="{@href}" target="link"><xsl:apply-templates select="node()"/></a>
      </xsl:template>
      <xsl:template match="xm:code">
        <script src="{@src}"></script>
      </xsl:template>

      </xsl:stylesheet>
  </path>

  <path url="/search/suggest" content-type="text/plain" method="GET">
    let $options :=<search:options xmlns="http://marklogic.com/appservices/search">
      <additional-query>{cts:collection-query("articles")}</additional-query>
      <default-suggestion-source>
        <word>
          <element ns="http://xmlmonks.com" name="article"/>
          <attribute ns="" name="title"/>
        </word>
      </default-suggestion-source>
      <term-option>wildcarded</term-option>
      <term-option>case-insensitive</term-option>
    </search:options>
    let $term as xs:string := fn:concat('*',xdmp:url-decode(xdmp:get-request-field("term",'')),'*')
    let $data := xdmp:to-json(search:suggest($term,$options))
    return
     $data
  </path>

  <path url="/monastery.atom" content-type="application/atom+xml" method="GET">
    <feed xmlns="http://www.w3.org/2005/Atom"> 
        <title>XML Monks atom feed</title>
        <link href="http://xmlmonks.com/monastery.atom" rel="self" />
        <link href="http://xmlmonks.com/monastery" />
        <id>urn:uuid:10a75d80-a399-21d9-b21C-0023139e0af6</id>
        <author>
                <name>Jim Fuller</name>
                <email>jim.fuller@webcomposite.com</email>
        </author>
 
        {
        let $tag := (mx:param('tag'),'articles')[1]
        return
        for $article in fn:collection($tag)
             order by $article/xm:article/@date descending
             return
        <entry>
                <title>{fn:data($article/xm:article/@title)}</title>
                <link href="http://xmlmonks.com/" />
                <summary>Some text.</summary>
        </entry>
        }
    </feed>
  </path>

  <path url="/c/tagnav" content-type="text/html" method="GET">
    <nav xmlns="http://www.w3.org/1999/xhtml">
          <h2>
            <a href="/monastery?tag=recent" class="{if (mx:param('tag') eq
            'recent' and fn:not(mx:param('search'))) then 'current' else ()}">Recent</a>
            | <a href="/monastery?tag=" class="{if
            (fn:empty(mx:param('tag')) and fn:not(mx:param('search')))
             then 'current' else ()}">All</a>
            | <a href="/monastery?tag=ruminate"  class="{if (mx:param('tag') eq
            'ruminate' and fn:not(mx:param('search'))) then 'current'
            else ()}"><span class="ruminate">Ruminations</span></a>
            | <a href="/monastery?tag=xml" class="{if (mx:param('tag') eq
            'xml' and fn:not(mx:param('search'))) then 'current' else
            ()}"><span class="xml">XML</span></a>
            | <a href="/monastery?tag=xquery" class="{if (mx:param('tag') eq
            'xquery' and fn:not(mx:param('search'))) then 'current'
            else ()}"><span class="xquery">XQuery</span></a>
            | <a href="/monastery?tag=xproc" class="{if (mx:param('tag') eq
            'xproc' and fn:not(mx:param('search'))) then 'current'
            else ()}"><span class="xproc">XProc</span></a> 
            | <a href="/monastery?tag=xslt" class="{if (mx:param('tag') eq
            'xslt' and fn:not(mx:param('search'))) then 'current' else
            ()}"><span class="xslt">XSLT</span></a>
            | <a href="/monastery?tag=web" class="{if (mx:param('tag') eq
            'web' and fn:not(mx:param('search'))) then 'current' else
            ()}"><span class="web">Web</span></a>
            | <a href="/monastery?tag=dev" class="{if (mx:param('tag') eq
            'dev' and fn:not(mx:param('search'))) then 'current' else
            ()}"><span class="dev">Dev</span></a>
            <span class="search"><form id="searchform" action="/monastery" method="GET"><input id="search" name="search" size="20"
            type="text" value="{mx:param('search')}"/>&#160; <span
            onclick="$('#searchform').submit()" class="submit">search</span></form></span>
          </h2>
        </nav>
  </path>

  <path url="/c/head" content-type="text/html" method="GET">
      <head xmlns="http://www.w3.org/1999/xhtml">
        <meta charset="utf-8"/>     
        <title>XML Monks</title>
        <link href="/monastery.atom" type="application/atom+xml" rel="alternate" title="Sitewide ATOM Feed" />
        <link rel="icon" href="/favicon.ico"/> 
        <script type="text/javascript"
        src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
        <script type="text/javascript"
        src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.13/jquery-ui.min.js"></script>
        <link href="http://fonts.googleapis.com/css?family=Inconsolata&amp;v1" rel="stylesheet" type="text/css"/>
        <link href="http://fonts.googleapis.com/css?family=Cantarell" rel="stylesheet" type="text/css"/>
        <link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.0/themes/smoothness/jquery-ui.css" rel="stylesheet" type="text/css"/>
        <link href="/resource/css/style.css" rel="stylesheet" type="text/css"/>
      </head>
  </path>

  <path url="/c/header" content-type="text/html" method="GET">
        <header xmlns="http://www.w3.org/1999/xhtml">
          <h1><span class="contacts">linkedin:&#160;<a class="altlink" 
          href="http://cz.linkedin.com/in/jimfuller"
          target="linkedin">Jim Fuller</a> &#160;&#9674;&#160;
          github: <a class="altlink"
          href="http://github.com/xquery"
          target="github">xquery</a> &#160;&#9674;&#160;
          twitter: <a class="altlink"
          href="http://twitter.com/#!/xquery"
          target="twitter">@xquery</a> &#160;&#9674;&#160; 
          email:<a  class="altlink"
          href="mailto:jim@webcomposite.com">jim@webcomposite.com</a></span> <a href="/monastery?tag=recent">XML
          Monks</a><sup class="beta">&#946;</sup></h1>
        </header>
  </path>

  <path url="/c/footer" content-type="text/html" method="GET">
    <footer xmlns="http://www.w3.org/1999/xhtml">
      <br/><br/><br/><br/>
      &#169; 2011 <strong>Jim Fuller</strong>, content contained on
      this site is licensed under <a
      href="http://creativecommons.org/licenses/by-nc/2.0/"
      target="license">Creative Commons 2.0</a>.<br/> Powered by
<a href="http://www.marklogic.com" target="MarkLogic">
MarkLogic Server
<span class="server-version">4.2-4</span> Community License.
</a>
    </footer>
  </path>

  <path url="/userprofile" type="template" content-type="text/html" data="/d/people"
        method="GET">
    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
      <xsl:template match="*">
        <div>
          <h2>User Profile</h2>
          First: <xsl:value-of select="person/first"/><br/>
          Last: <xsl:value-of select="person/last"/><br/>
          Email: <xsl:value-of select="person/email"/><br/>
          Github: <xsl:value-of select="person/github"/><br/>
          Twitter: <xsl:value-of select="person/twitter"/><br/>
        </div>
      </xsl:template>
      </xsl:stylesheet>
  </path>

  <path url="/logon" content-type="text/html" method="GET">
    <html xmlns="http://www.w3.org/1999/xhtml">
      <body>
        <h1>Logon</h1>
      </body>
    </html>
  </path>

  <!-- data //-->
  <path url="/mail/xproc" content-type="text/xml" method="GET">
    xdmp:document-get('http://markmail.org/atom/xproc')
  </path>

  <path url="/article.xml" content-type="text/xml" method="GET">
    fn:doc(mx:param('uri'))
  </path>

  <path url="/test" content-type="text/xml" method="GET">
    mx:delete-cache()
  </path>

  <path url="/json" content-type="text/plain" method="GET">
    import module namespace json="http://marklogic.com/json" at "/lib/mljson/lib/json.xqy";
    json:xmlToJSON(<json type="object"><item type="string">test</item></json>)
  </path>

  <path url="/d/people" content-type="application/json" method="GET">
    <people xmlns="">
      <person id="user">
        <first>Jim</first>
        <last>Fuller</last>
        <email>jim.fuller@webcomposite.com</email>
        <twitter>xquery</twitter>
        <github>xquery</github>
      </person>
    </people>
  </path>

  <path url="/d/articles" content-type="text/xml" method="GET">
    <articles xmlns="data">
      <article>
        <section><title>My first article</title></section>
      </article>
    </articles>
  </path>

  <path url="/d/github" content-type="text/plain" method="GET">
   let $id  :=  mx:param('id')
   let $url := fn:concat("http://github.com/api/v2/json/repos/show/",$id)
   return
   xdmp:document-get($url,
          <options xmlns="xdmp:document-get">
           <format>text</format>
       </options>)
  </path>

  <path url="/d/github.xml" content-type="text/xml" method="GET">
    import module namespace json="http://marklogic.com/json" at "/lib/mljson/lib/json.xqy";

   let $id  :=  mx:param('id')
   let $url := fn:concat("http://github.com/api/v2/json/repos/show/",$id)
   return
   json:jsonToXML(
   xdmp:document-get($url,
          <options xmlns="xdmp:document-get">
           <format>text</format>
       </options>)
       )
  </path>

  <!-- module //-->
 
  <!-- templates (views) //-->
  <path url="/git" method="GET" type="template"
        content-type="text/html" data="/d/github">
  {{#repositories}}
  <p xmlns="http://www.w3.org/1999/xhtml">
      <a href="{{url}}">{{name}}</a>
      owner: {{owner}}<br/>
      language: {{language}}<br/>
    </p>

  {{/repositories}}

  </path>

  <!-- default MX (required for MX build/test) //-->
  <path url="/mx" method="GET" type="inline" content-type="text/html" description="MX status page">
    <html>
      <body>
        <h1>MX Status Page</h1>
      </body>
    </html>
  </path>

</app>
